////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Created: 06.08.2023
// Author: Deathman
// Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "material_helper.xrh"
#include "material_components.xrh"
#include "displacement.xrh"
#include "parallax_shadows.xrh"
#include "normal_map_functions.xrh"
#include "ao_from_height.xrh"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MaterialParams
{
    float3 Albedo;
    float Opacity;
    float3 Normal;
    float Height;
    float Roughness;
    float Metallness;
    float AO;
    float SubSurfacePower;
    float EmissionPower;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MaterialParams GetMaterial(float2 UV, float3x3 TBN, float3 Position)
{
    MaterialParams Material;
    
    float3 ViewVector = GetViewVector(Position, TBN);
    
    UV = GetDisplacement(Position, ViewVector, UV, BASE_MATERIAL);
    
    MaterialComponents UnpackedMaterial;
    
#if USE_BUMP
    UnpackedMaterial = UnpackBumpMaterial(UV);
#else
    UnpackedMaterial = UnpackMaterial(UV);
    UnpackedMaterial = UpdateMaterial(UV, UnpackedMaterial);
#endif
    
    Material.Albedo = UnpackedMaterial.Albedo;

    Material.Opacity = UnpackedMaterial.Opacity;

    Material.Normal = UnpackedMaterial.Normal;

    Material.Height = UnpackedMaterial.Height;

    Material.Roughness = UnpackedMaterial.Roughness;

    Material.Metallness = UnpackedMaterial.Metallness;

    Material.SubSurfacePower = UnpackedMaterial.SubSurfacePower;

    Material.EmissionPower = UnpackedMaterial.EmissionPower;
    
#if !defined(USE_BAKED_AO) && MATERIAL_QUALITY >= HIGHT_QUALITY
    Material.AO = AOfromHeight(UV, length(Position));
#else
    Material.AO = UnpackedMaterial.AO;
#endif

#ifdef USE_TDETAIL
    // Create detail UV - dt_params is scaler
    float2 DetailUV = UV * dt_params.xy;

    // Calculate displacement for detail texture only if we have good quality for materials
#if USE_DETAIL_BUMP && MATERIAL_QUALITY >= MIDDLE_QUALITY
    DetailUV = GetDetailDisplacement(Position, ViewVector, DetailUV, DETAIL_MATERIAL);
#endif

    MaterialComponents UnpackedDetailMaterial;

#if USE_DETAIL_BUMP
    UnpackedDetailMaterial = UnpackDetailBumpMaterial(DetailUV);
    
    // Correctly blend two maps
    Material.Normal = Blend_Normal_Maps(Material.Normal, UnpackedMaterial.Normal);

    // Combine main height map with detail height map, multiplicated by coeffient, make detail height map influence is smaller
    Material.Height += GetDetailHeight(DetailUV) * 0.2f;

    //Material.Roughness *= 2.0f * UnpackedDetailMaterial.Roughness;
#else
    UnpackedDetailMaterial = UnpackDetailMaterial(DetailUV);
#endif
    
    // Combine main albedo with detail
    Material.Albedo *= 2.0f * UnpackedDetailMaterial.Albedo;
#endif // USE_TDETAIL

#ifdef USE_BUMP
    // Make normals more power
    Material.Normal.z = pow4(Material.Normal.z);

    // Make normals more power with heightmap
    Material.Normal.xy *= Material.Height + 1.0f;
    Material.Normal.z *= Material.Height;
#endif
    
    Material.Normal = normalize(Material.Normal);

    return Material;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
