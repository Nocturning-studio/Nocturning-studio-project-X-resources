////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Author: Deadiablo, Deathman
// Original code: https://www.xrhadertoy.com/view/WscyRl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "material_components.xrh"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define AO_SAMPLES 8.0
#define AO_ATTENUATION 5.0
#define AO_RADIUS 0.1
#define AO_POWER 4.4
#define AO_RENDER_DISTANCE 25.0f
#define AO_STEP_SIZE 1.0f / AO_SAMPLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float AOfromHeight(float2 UV, float WorldSpaceDepth
#ifdef USE_FOR_TERRAIN_MATERIAL
    , float4 BlendMask
#endif
)
{
    float AO = 1.0f;

/*
    if (WorldSpaceDepth < AO_RENDER_DISTANCE)
    {
#ifdef USE_FOR_TERRAIN_MATERIAL
        float height = GetTerrainDetailHeight(BlendMask, UV);
#else
        float height = GetHeight(UV);
#endif

        AO = NULL;
        
        float c, s;
        sincos(PI, c, s);
        float2x2 rot = float2x2(c, -s, s, c);
        float2 dir;
        sincos(5.0f * PI, dir.y, dir.x);
        
        [unroll]
        for (float step = 0.0f; step < 1.0f; step += AO_STEP_SIZE)
        {
            dir = mul(dir, rot);
            float noiseDirection = tex2D(s_blue_noise, UV + step); //random(float2(f * 16524.56f, f * 23532.43f));
            float2 noiseOffset = noiseDirection * dir * AO_RADIUS;
            noiseOffset = noiseOffset * 2.0f - 1.0f;

#ifdef USE_FOR_TERRAIN_MATERIAL
            AO += max(GetTerrainDetailHeight(BlendMask, UV + noiseOffset) - height, 0.0f);
#else
            AO += max(GetHeight(UV + noiseOffset) - height, 0.0f);
#endif
        }

        AO /= AO_SAMPLES;
        AO = invert(AO);
        AO = abs(AO);
        AO = pow(AO, AO_POWER);

        // Create smooth render distance border
        float FarFadingFactor = smoothstep(AO_RENDER_DISTANCE * 0.75f, AO_RENDER_DISTANCE, WorldSpaceDepth);
        AO = lerp(AO, 1.0f, FarFadingFactor);
    }
*/

    return AO;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////