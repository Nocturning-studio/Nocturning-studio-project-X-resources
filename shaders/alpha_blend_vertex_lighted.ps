#include "common.xrh"
#include "alpha_test.xrh"
#include "gbuffer.xrh"

struct v2p
{
 	float2 tc0: TEXCOORD0; // base
    float3 position: TEXCOORD1;
  	float3 c0: COLOR0;
};

struct PixelShaderOutputStruct
{
	float4 Generic_0: COLOR0;
	float4 Position: COLOR1;
};
//////////////////////////////////////////////////////////////////////////////////////////
PixelShaderOutputStruct main (v2p I)
{
    float4 BaseTextureData = tex2D (s_base, I.tc0);
    
    BaseTextureData.rgb = BaseTextureData.rgb * I.c0 * 2.0f;
    
    // Deathman - считаем туман второй раз, но теперь специально для этого конкретного объекта
    float Fog = CalcFogness(I.position);
    BaseTextureData.rgb = ApplyFogness(BaseTextureData.rgb, Fog);
    float FogOpacity = BaseTextureData.a * invert(pow(Fog, 4.4f));
    
    PixelShaderOutputStruct Output;
    Output.Generic_0 = float4(BaseTextureData.rgb, FogOpacity);
    
    calc_alpha_test(I.tc0, BaseTextureData.a);
    Output.Position = PackPositionAndNormal(I.position, NULL);
    return Output;
}
