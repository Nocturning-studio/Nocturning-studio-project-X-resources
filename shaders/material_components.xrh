////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Created: 27.06.2024
// Author: Deathman
// Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "normal_map_functions.xrh"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MaterialComponents
{
    float3 Albedo;
    float Opacity;
    float3 Normal;
    float Height;
    float Roughness;
    float Metallness;
    float EmissionPower;
    float SubSurfacePower;
    float AO;
};

/*================================================================================================================*/
//Base material components
/*================================================================================================================*/
//Bump material storage type
/*----------------------------------------------------------------------------------------------------------------*/
MaterialComponents UnpackBumpMaterial(float2 UV)
{
    MaterialComponents Output;
    
    // Get storage buffers
    float4 AlbedoData = tex2D(s_base, UV);
    float4 BumpData = tex2D(s_bump, UV);
    float4 BumpXData = tex2D(s_bumpX, UV);
    
    // --Get Albedo--
    Output.Albedo = AlbedoData.rgb;
    
    // --Get Opacity--
    Output.Opacity = AlbedoData.a;
    
    // --Get Normal--
   
    // DXT Compressed normals (TBN = ABG)
    float3 CompressedNormal = BumpData.wzx;

    // Decompressing data + 0.5f
    float3 DecompressionData = BumpXData.xyz;

    // Transform normal map color from [0; 1] space to [-1; 1] and decompress
    // DecompressionData = Decompress data + 0.5f
    float3 DecompressedNormal = NULL;
    
    DecompressedNormal.xy = CompressedNormal.xy + (DecompressionData.xy - 1.0f);
    
    DecompressedNormal.z = sqrt(1.0f - dot(DecompressedNormal.xy, DecompressedNormal.xy));
    
    Output.Normal = DecompressedNormal;
    
    // --Get Roughness--
    
    // Separate glossiness from buffer and invert, for create roughness
    float Roughness = invert(BumpData.r);
    
    // Twice power for PBR BRDF
    Roughness = pow2(Roughness);
    
    Output.Roughness = Roughness;
    
    // --Get height--
    Output.Height = BumpXData.a;

    // --PLACEHOLDERS--
    Output.EmissionPower = 0.0f;
    Output.Metallness = 0.0f;
    Output.SubSurfacePower = 0.0f;
    Output.AO = 1.0f;
    
    return Output;
}

/*----------------------------------------------------------------------------------------------------------------*/
//xrMaterial storage type (In future)
/*----------------------------------------------------------------------------------------------------------------*/
MaterialComponents UnpackMaterial(float2 UV)
{
    MaterialComponents Output;

    // Get storage buffers
    float4 AlbedoData = tex2D(s_base, UV);
    
    // --Get Albedo--
    Output.Albedo = AlbedoData.rgb;
    
    // --Get Opacity--
    Output.Opacity = AlbedoData.a;
    
    // --PLACEHOLDERS--
    Output.Normal = float3(0, 0, 1);
    Output.Roughness = 1.0f;
    Output.Height = 1.0f;
    Output.EmissionPower = 0.0f;
    Output.Metallness = 0.0f;
    Output.SubSurfacePower = 0.0f;
    Output.AO = 1.0f;
    
    return Output;
}

/*----------------------------------------------------------------------------------------------------------------*/
//Separated material storage type (1 component = 1 sample: Slow - for debugging)
/*----------------------------------------------------------------------------------------------------------------*/
MaterialComponents UpdateMaterial(float2 UV, MaterialComponents Input)
{
    MaterialComponents Output;
    
    // Initialize new material
    Output = Input;
    
    // --Get Normal--
#if USE_CUSTOM_NORMAL
    Output.Normal = tex2D(s_custom_normal, UV) * 2.0f - 1.0f;
#endif
    
    // --Get Roughness--
#if USE_CUSTOM_ROUGHNESS
    Output.Roughness = tex2D(s_custom_roughness, UV).r;
#endif
    
    // --Get Metallness--
#if USE_CUSTOM_METALLNESS
    Output.Metallness = tex2D(s_custom_metallness, UV).r;
#endif
    
    // --Get height--
#if USE_CUSTOM_DISPLACEMENT
    Output.Height = tex2D(s_custom_displacement, UV).r;
#endif
    
    // --Get Emission Power--
#if USE_CUSTOM_EMISSIVE
    Output.EmissionPower = tex2D(s_custom_emissive, UV).r;
#endif
    
    // --Get Subsuface scattering Power--
#if USE_CUSTOM_SUBSURFACE
    Output.SubSurfacePower = tex2D(s_custom_subsurface, UV).r;
#endif
    
#if USE_BAKED_AO
    Output.AO = tex2D(s_baked_ao, UV).r;
#endif
    
    return Output;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Specific functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float GetHeight(float2 UV)
{
#if USE_BUMP
    return tex2Dlod0(s_bumpX, UV).a;
#elif USE_CUSTOM_DISPLACEMENT
    return tex2Dlod0(s_custom_displacement, UV).r;
#else
    return 1.0f;
#endif
}
/*================================================================================================================*/
//Detail material components
/*================================================================================================================*/
//Bump material storage type
/*----------------------------------------------------------------------------------------------------------------*/
MaterialComponents UnpackDetailBumpMaterial(float2 UV)
{
    MaterialComponents Output;
    
    // Get storage buffers
    float4 AlbedoData = tex2D(s_detail, UV);
    float4 BumpData = tex2D(s_detailBump, UV);
    float4 BumpXData = tex2D(s_detailBumpX, UV);
    
    // --Get Albedo--
    Output.Albedo = AlbedoData.rgb;
    
    // --Get Opacity--
    Output.Opacity = 1.0f;
    
    // --Get Normal--
   
    // DXT Compressed normals (TBN = ABG)
    float3 CompressedNormal = BumpData.wzx;

    // Decompressing data + 0.5f
    float3 DecompressionData = BumpXData.xyz;

    // Transform normal map color from [0; 1] space to [-1; 1] and decompress
    // DecompressionData = Decompress data + 0.5f
    float3 DecompressedNormal = NULL;
    
    DecompressedNormal.xy = CompressedNormal.xy + (DecompressionData.xy - 1.0f);
    
    DecompressedNormal.z = sqrt(1.0f - dot(DecompressedNormal.xy, DecompressedNormal.xy));
    
    Output.Normal = DecompressedNormal;
    
    // --Get Roughness--
    
    // Separate glossiness from buffer and invert, for create roughness
    float Roughness = invert(BumpData.r);
    
    // Twice power for PBR BRDF
    Roughness = pow2(Roughness);
    
    Output.Roughness = Roughness;
    
    // --Get height--
    Output.Height = BumpXData.a;

    // --PLACEHOLDERS--
    Output.EmissionPower = 0.0f;
    Output.Metallness = 0.0f;
    Output.SubSurfacePower = 0.0f;
    Output.AO = 1.0f;
    
    return Output;
}

/*----------------------------------------------------------------------------------------------------------------*/
//xrMaterial storage type (In future)
/*----------------------------------------------------------------------------------------------------------------*/
MaterialComponents UnpackDetailMaterial(float2 UV)
{
    MaterialComponents Output;

    // Get storage buffers
    float4 AlbedoData = tex2D(s_detail, UV);
    
    // --Get Albedo--
    Output.Albedo = AlbedoData.rgb;
    
    // --Get Opacity--
    Output.Opacity = AlbedoData.a;
    
    // --PLACEHOLDERS--
    Output.Normal = float3(0, 0, 1);
    Output.Roughness = 1.0f;
    Output.Height = 1.0f;
    Output.EmissionPower = 0.0f;
    Output.Metallness = 0.0f;
    Output.SubSurfacePower = 0.0f;
    Output.AO = 1.0f;
    
    return Output;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Specific functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float GetDetailHeight(float2 UV)
{
#if USE_DETAIL_BUMP
    return tex2Dlod0(s_detailBumpX, UV).a;
#else
    return 0.5f;
#endif
}
/*================================================================================================================*/
//Terrain material components
/*================================================================================================================*/
float4 GetTerrainDetailMask(float2 UV)
{
    float4 BlendMask = tex2D(s_mask, UV);
    return BlendMask / dot(BlendMask, 1.0f);
}

float3 GetTerrainDetailAlbedo(float4 BlendMask, float2 UV)
{
    float3 RedChannelAlbedo = tex2D(s_dt_r, UV).rgb * BlendMask.r;
    float3 GreenChannelAlbedo = tex2D(s_dt_g, UV).rgb * BlendMask.g;
    float3 BlueChannelAlbedo = tex2D(s_dt_b, UV).rgb * BlendMask.b;
    float3 AlphaChannelAlbedo = tex2D(s_dt_a, UV).rgb * BlendMask.a;
    return RedChannelAlbedo + GreenChannelAlbedo + BlueChannelAlbedo + AlphaChannelAlbedo;
}

float4 GetTerrainDetailBump(float4 BlendMask, float2 UV)
{
    float4 RedChannelBump = tex2D(s_dn_r, UV) * BlendMask.r;
    float4 GreenChannelBump = tex2D(s_dn_g, UV) * BlendMask.g;
    float4 BlueChannelBump = tex2D(s_dn_b, UV) * BlendMask.b;
    float4 AlphaChannelBump = tex2D(s_dn_a, UV) * BlendMask.a;
    return RedChannelBump + GreenChannelBump + BlueChannelBump + AlphaChannelBump;
}

float4 GetTerrainDetailBumpDecompression(float4 BlendMask, float2 UV)
{
    float4 RedChannelBumpX = tex2D(s_dn_rX, UV) * BlendMask.r;
    float4 GreenChannelBumpX = tex2D(s_dn_gX, UV) * BlendMask.g;
    float4 BlueChannelBumpX = tex2D(s_dn_bX, UV) * BlendMask.b;
    float4 AlphaChannelBumpX = tex2D(s_dn_aX, UV) * BlendMask.a;
    return RedChannelBumpX + GreenChannelBumpX + BlueChannelBumpX + AlphaChannelBumpX;
}

float GetTerrainDetailHeight(float4 BlendMask, float2 UV)
{
    float RedChannelHeight = tex2Dlod0(s_dn_rX, UV).a * BlendMask.r;
    float GreenChannelHeight = tex2Dlod0(s_dn_gX, UV).a * BlendMask.g;
    float BlueChannelHeight = tex2Dlod0(s_dn_bX, UV).a * BlendMask.b;
    float AlphaChannelHeight = tex2Dlod0(s_dn_aX, UV).a * BlendMask.a;
    return RedChannelHeight + GreenChannelHeight + BlueChannelHeight + AlphaChannelHeight;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////