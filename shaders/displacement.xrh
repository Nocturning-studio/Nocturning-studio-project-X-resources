////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Created		: 07.08.2023
//	Author		: Deathman
//	Noctuning Studio for NS Project X
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "material_components.xrh"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constant table
#define PARALLAX_H 0.02f
#define constant_parallax_scale float2(PARALLAX_H, -PARALLAX_H / 2)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Quality
#if MATERIAL_QUALITY == UNDEFINED_QUALITY
#define STEEP_PARALLAX_START_FADE 5
#define STEEP_PARALLAX_STOP_FADE 10
#define PARALLAX_START_FADE 15
#define PARALLAX_STOP_FADE 20
#define STEEP_PARALLAX_MIN_SAMPLES 3
#define STEEP_PARALLAX_MAX_SAMPLES 5

#define DETAIL_STEEP_PARALLAX_START_FADE 4
#define DETAIL_STEEP_PARALLAX_STOP_FADE 8
#define DETAIL_PARALLAX_START_FADE 10
#define DETAIL_PARALLAX_STOP_FADE 15
#define DETAIL_STEEP_PARALLAX_MIN_SAMPLES 1
#define DETAIL_STEEP_PARALLAX_MAX_SAMPLES 4

#define TERRAIN_STEEP_PARALLAX_START_FADE 8
#define TERRAIN_STEEP_PARALLAX_STOP_FADE 12
#define TERRAIN_PARALLAX_START_FADE 15
#define TERRAIN_PARALLAX_STOP_FADE 20
#define TERRAIN_STEEP_PARALLAX_MIN_SAMPLES 3
#define TERRAIN_STEEP_PARALLAX_MAX_SAMPLES 5
#elif MATERIAL_QUALITY == LOW_QUALITY
#define STEEP_PARALLAX_START_FADE 5
#define STEEP_PARALLAX_STOP_FADE 10
#define PARALLAX_START_FADE 15
#define PARALLAX_STOP_FADE 20
#define STEEP_PARALLAX_MIN_SAMPLES 3
#define STEEP_PARALLAX_MAX_SAMPLES 5

#define DETAIL_STEEP_PARALLAX_START_FADE 4
#define DETAIL_STEEP_PARALLAX_STOP_FADE 8
#define DETAIL_PARALLAX_START_FADE 10
#define DETAIL_PARALLAX_STOP_FADE 15
#define DETAIL_STEEP_PARALLAX_MIN_SAMPLES 1
#define DETAIL_STEEP_PARALLAX_MAX_SAMPLES 4

#define TERRAIN_STEEP_PARALLAX_START_FADE 8
#define TERRAIN_STEEP_PARALLAX_STOP_FADE 12
#define TERRAIN_PARALLAX_START_FADE 15
#define TERRAIN_PARALLAX_STOP_FADE 20
#define TERRAIN_STEEP_PARALLAX_MIN_SAMPLES 5
#define TERRAIN_STEEP_PARALLAX_MAX_SAMPLES 10
#elif MATERIAL_QUALITY == MIDDLE_QUALITY
#define STEEP_PARALLAX_START_FADE 7
#define STEEP_PARALLAX_STOP_FADE 12
#define PARALLAX_START_FADE 17
#define PARALLAX_STOP_FADE 22
#define STEEP_PARALLAX_MIN_SAMPLES 2
#define STEEP_PARALLAX_MAX_SAMPLES 6

#define DETAIL_STEEP_PARALLAX_START_FADE 5
#define DETAIL_STEEP_PARALLAX_STOP_FADE 10
#define DETAIL_PARALLAX_START_FADE 10
#define DETAIL_PARALLAX_STOP_FADE 20
#define DETAIL_STEEP_PARALLAX_MIN_SAMPLES 2
#define DETAIL_STEEP_PARALLAX_MAX_SAMPLES 4

#define TERRAIN_STEEP_PARALLAX_START_FADE 8
#define TERRAIN_STEEP_PARALLAX_STOP_FADE 12
#define TERRAIN_PARALLAX_START_FADE 17
#define TERRAIN_PARALLAX_STOP_FADE 22
#define TERRAIN_STEEP_PARALLAX_MIN_SAMPLES 8
#define TERRAIN_STEEP_PARALLAX_MAX_SAMPLES 14
#elif MATERIAL_QUALITY == HIGHT_QUALITY
#define STEEP_PARALLAX_START_FADE 10
#define STEEP_PARALLAX_STOP_FADE 15
#define PARALLAX_START_FADE 20
#define PARALLAX_STOP_FADE 25
#define STEEP_PARALLAX_MIN_SAMPLES 4
#define STEEP_PARALLAX_MAX_SAMPLES 8

#define DETAIL_STEEP_PARALLAX_START_FADE 7
#define DETAIL_STEEP_PARALLAX_STOP_FADE 12
#define DETAIL_PARALLAX_START_FADE 15
#define DETAIL_PARALLAX_STOP_FADE 20
#define DETAIL_STEEP_PARALLAX_MIN_SAMPLES 2
#define DETAIL_STEEP_PARALLAX_MAX_SAMPLES 4

#define TERRAIN_STEEP_PARALLAX_START_FADE 10
#define TERRAIN_STEEP_PARALLAX_STOP_FADE 14
#define TERRAIN_PARALLAX_START_FADE 20
#define TERRAIN_PARALLAX_STOP_FADE 25
#define TERRAIN_STEEP_PARALLAX_MIN_SAMPLES 8
#define TERRAIN_STEEP_PARALLAX_MAX_SAMPLES 12
#endif
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float2 CalculateParallaxMapping(float3 Position, float3 ViewVector, float2 UV, 
                                float StartFadingDistance, float StopFadingDistance, int MaterialType
#ifdef USE_FOR_TERRAIN_MATERIAL
    , float4 BlendMask
#endif
)
{
    if (Position.z < StopFadingDistance)
    {
        float height = 0.0f;

#ifdef USE_FOR_TERRAIN_MATERIAL
        height = GetTerrainDetailHeight(BlendMask, UV);
#else
        if(MaterialType == BASE_MATERIAL)
            height = GetHeight(UV);
        else if (MaterialType == DETAIL_MATERIAL)
            height = GetDetailHeight(UV);
#endif

        height *= constant_parallax_scale.x;
        height += constant_parallax_scale.y;

        float fParallaxFade = smoothstep(StopFadingDistance, StartFadingDistance, Position.z);
        UV += height * ViewVector * fParallaxFade;
    }

    return UV;
}

float2 CalculateParallaxOcclusionMapping(float3 Position, float3 ViewVector, float2 UV,
                                         float StartFadingDistance, float StopFadingDistance, 
                                         int MinimalSamplesCount, int MaximalSamplesCount, int MaterialType
#ifdef USE_FOR_TERRAIN_MATERIAL
    , float4 BlendMask
#endif
)
{
    if (Position.z < StopFadingDistance)
    {
        // Calculate number of steps
        float nNumSteps = lerp(MaximalSamplesCount, MinimalSamplesCount, ViewVector.z);

        float fStepSize = 1.0f / nNumSteps;
        float2 vDelta = -ViewVector.xy * constant_parallax_scale.x;
        float2 vTexOffsetPerStep = fStepSize * vDelta;

        // Prepare start data for cycle
        float2 vTexCurrentOffset = UV;
        float fCurrHeight = 0.0f;
        float fCurrentBound = 1.0f;

        for (; fCurrHeight < fCurrentBound; fCurrentBound -= fStepSize)
        {
            vTexCurrentOffset += vTexOffsetPerStep;

#ifdef USE_FOR_TERRAIN_MATERIAL
            fCurrHeight = GetTerrainDetailHeight(BlendMask, vTexCurrentOffset);
#else
            if (MaterialType == BASE_MATERIAL)
                fCurrHeight = GetHeight(vTexCurrentOffset);
            else if (MaterialType == DETAIL_MATERIAL)
                fCurrHeight = GetDetailHeight(vTexCurrentOffset);
#endif
        }

        // Reconstruct previouse step's data
        vTexCurrentOffset -= vTexOffsetPerStep;

        float fPrevHeight = 0.0f;

#ifdef USE_FOR_TERRAIN_MATERIAL
        fPrevHeight = GetTerrainDetailHeight(BlendMask, vTexCurrentOffset);
#else
        if (MaterialType == BASE_MATERIAL)
            fPrevHeight = GetHeight(vTexCurrentOffset);
        else if (MaterialType == DETAIL_MATERIAL)
            fPrevHeight = GetDetailHeight(vTexCurrentOffset);
#endif

        // Smooth tc position between current and previouse step
        float fDelta2 = ((fCurrentBound + fStepSize) - fPrevHeight);
        float fDelta1 = (fCurrentBound - fCurrHeight);
        float fParallaxAmount = (fCurrentBound * fDelta2 - (fCurrentBound + fStepSize) * fDelta1) / (fDelta2 - fDelta1);
        float fParallaxFade = smoothstep(StopFadingDistance, StartFadingDistance, Position.z);

        UV += vDelta * ((1.0f - fParallaxAmount) * fParallaxFade);
    }

    return UV;
}

#ifndef USE_FOR_TERRAIN_MATERIAL
float2 GetDisplacement(float3 Position, float3 ViewVector, float2 UV, int MaterialType)
{
#if defined(USE_PARALLAX_OCCLUSION_MAPPING)
    UV = CalculateParallaxOcclusionMapping(Position, ViewVector, UV,
                                           STEEP_PARALLAX_START_FADE, 
                                           STEEP_PARALLAX_STOP_FADE, STEEP_PARALLAX_MIN_SAMPLES, 
                                           STEEP_PARALLAX_MAX_SAMPLES, MaterialType);
#elif defined(USE_PARALLAX_MAPPING)
    UV = CalculateParallaxMapping(Position, ViewVector, UV,
                                  PARALLAX_START_FADE, 
                                  PARALLAX_STOP_FADE, MaterialType);
#endif

    return UV;
}

float2 GetDetailDisplacement(float3 Position, float3 ViewVector, float2 UV, int MaterialType)
{
//#if defined(USE_PARALLAX_OCCLUSION_MAPPING)
//    UV = CalculateParallaxOcclusionMapping(Position, ViewVector, UV, DETAIL_STEEP_PARALLAX_START_FADE,
//                                           DETAIL_STEEP_PARALLAX_STOP_FADE, DETAIL_STEEP_PARALLAX_MIN_SAMPLES,
//                                           DETAIL_STEEP_PARALLAX_MAX_SAMPLES, MaterialType);
//#elif defined(USE_PARALLAX_MAPPING)
    UV = CalculateParallaxMapping(Position, ViewVector, UV,
                                  DETAIL_PARALLAX_START_FADE, 
                                  DETAIL_PARALLAX_STOP_FADE, MaterialType);
//#endif

    return UV;
}
#else
float2 GetTerrainDisplacement(float3 Position, float3 ViewVector, float2 UV, float4 BlendMask, int MaterialType)
{
#if defined(USE_PARALLAX_OCCLUSION_MAPPING)
    UV = CalculateParallaxOcclusionMapping(Position, ViewVector, UV, TERRAIN_STEEP_PARALLAX_START_FADE,
        TERRAIN_STEEP_PARALLAX_STOP_FADE, DETAIL_STEEP_PARALLAX_MIN_SAMPLES,
        TERRAIN_STEEP_PARALLAX_MAX_SAMPLES, MaterialType, BlendMask);
#elif defined(USE_PARALLAX_MAPPING)
    UV = CalculateParallaxMapping(Position, ViewVector, UV,
        TERRAIN_PARALLAX_START_FADE,
        TERRAIN_PARALLAX_STOP_FADE, MaterialType, BlendMask);
#endif

    return UV;
}
#endif
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////