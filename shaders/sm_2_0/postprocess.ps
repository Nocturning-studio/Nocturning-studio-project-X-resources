//////////////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "chromatic_abberation.h"
//////////////////////////////////////////////////////////////////////////////////////////
struct v2p
{
    half4 color: COLOR0; // multiplier, color.w = noise_amount
    half4 gray: COLOR1; // (.3,.3,.3.,amount)
    half2 tc0: TEXCOORD0; // base1 (duality)
    half2 tc1: TEXCOORD1; // base2 (duality)
    half2 tc2: TEXCOORD2; // base  (noise)
};
//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D s_noise;
uniform sampler2D s_distort;
uniform sampler2D s_vignette;
//////////////////////////////////////////////////////////////////////////////////////////
uniform half4 c_brightness;
uniform half vignette_power;
uniform half4 sepia_params;
uniform half3 hdr_params;
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
half4 main (v2p I): COLOR
{
#ifdef USE_DISTORTION
    half4 distort = tex2D(s_distort, I.tc0);
	half2 offset = (distort.xy - 0.5h) * def_distort;
#else
    half2 offset = half2 (0.0h, 0.0h);
#endif
    
    half3 t_0 = tex2D (s_base, I.tc0 + offset);
    half3 t_1 = tex2D (s_base, I.tc1 + offset);
    half3 image = (t_0 + t_1) * 0.5h;
    
//#ifdef USE_CHROMATIC_ABBERATION
//    image.rgb = ChromaticAberration (image.rgb, (I.tc0 + I.tc1) * 0.5h);
//#endif
    
#ifdef USE_HDR
    image = pow(image, hdr_params.y);
    image *= hdr_params.z;
    const half fWhiteIntensity = hdr_params.x;
    const half fWhiteIntensitySQR = fWhiteIntensity * fWhiteIntensity;

    image = half3 (((image * (1.0h + image / fWhiteIntensitySQR)) / (image + 1.0h)));
#endif    

#ifdef VIGNETTE_MODE
#if VIGNETTE_MODE == 1
    half VignettePower = 0.5h;  
#elif VIGNETTE_MODE == 2
    half VignettePower = vignette_power;
#endif
    half Vignette = tex2D (s_vignette, I.tc1).r;
    image *= Vignette + (1.0f - Vignette) * (1.0f - VignettePower);
#endif    

#ifdef USE_SEPIA
    image *= sepia_params.rgb + (1.0f - sepia_params.rgb) * (1.0f - sepia_params.a);
#endif
    
    half gray = dot (image, I.gray);
    image = lerp (gray, image, I.gray.w);

    half4 t_noise = tex2D (s_noise, I.tc2);
    half3 noised = image * t_noise * 2.0h;
    image = lerp (noised, image, I.color.w);
    
    image = (image * I.color + c_brightness) * 2.0h;
	
    return half4 (image, 1.0h);
}
//////////////////////////////////////////////////////////////////////////////////////////
