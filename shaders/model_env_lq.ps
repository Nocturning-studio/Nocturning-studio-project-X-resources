//////////////////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "gbuffer.xrh"
//////////////////////////////////////////////////////////////////////////////////////////
struct v2p
{
 	float2 tc0: TEXCOORD0; // base
 	float3 tc1: TEXCOORD1; // environment
	float3 position: TEXCOORD2;
  	float3 c0: COLOR0; // sun
};
//////////////////////////////////////////////////////////////////////////////////////////
struct PixelShaderOutputStruct
{
	float4 Generic_0: COLOR0;
	float4 Position: COLOR1;
};
//////////////////////////////////////////////////////////////////////////////////////////
PixelShaderOutputStruct main (v2p I)
{
	float4 t_base = tex2D (s_base, I.tc0);
	float3 t_env0 = texCUBE (sky_s0, I.tc1);
    float3 t_env1 = texCUBE (sky_s1, I.tc1);
    float3 t_env = lerp (t_env0, t_env1, env_color.w) * L_ambient;

	float3 base = lerp (t_env, t_base, t_base.a);
	float3 light = I.c0;
	float3 final = light * base * 2;

	// Deathman - считаем туман второй раз, но теперь специально для этого конкретного объекта
    float Fog = CalcFogness (I.position);
    final.rgb = lerp (final.rgb, fog_params.rgb, Fog);
    float Opacity = (1.0f - pow (Fog, 2.2f)) * t_base.a;
    
    PixelShaderOutputStruct Output;
    Output.Generic_0 = float4 (final.rgb, Opacity);
    Output.Position = PackPositionAndNormal(I.position, NULL);
    return Output;
}
//////////////////////////////////////////////////////////////////////////////////////////
