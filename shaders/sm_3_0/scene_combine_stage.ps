////////////////////////////////////////////////////////////////////////////
//	Created		: 26.11.2023
//	Author		: Deathman
//  Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "accumulation_helper.h"
#include "ambient_light.h"
#include "shared\fog.h"
#include "reflection.h"
#include "BRDF.h"
////////////////////////////////////////////////////////////////////////////
float4 main (float2 TexCoords: TEXCOORD0): COLOR
{
    GBuffer GBuffer = UnpackGBuffer(TexCoords);
    LightingData Light = UnpackLightingAccumulator(TexCoords);
    
    float3 AmbientLighting = CalculateAmbient(GBuffer.AO, GBuffer.Normal);
    
#ifdef AO_ENABLED
    AmbientLighting *= tex2Dlod0(s_ao, TexCoords).r;
#endif
    
    float3 DiffuseLighting = AmbientLighting + Light.Diffuse;
    
    float3 SkyReflections = BlurredSkyReflection(GBuffer.Position, GBuffer.Normal, invert(GBuffer.Glossiness));
    
    float3 SpecularColor = lerp(GBuffer.Albedo + 0.5h, SkyReflections, GBuffer.Glossiness);
    
    float3 SpecularLighting = Light.Specular * SpecularColor * 1.5h;
	
    float3 SceneColor = mad(GBuffer.Albedo, DiffuseLighting, SpecularLighting) * GBuffer.BakedAO;
    
    float Fog = CalcFogness (GBuffer.Position);
    SceneColor = lerp (SceneColor, fog_params.rgb, Fog);
    float Opacity = pow (Fog, 2.2h);
	
    return float4(SceneColor, Opacity);
}
////////////////////////////////////////////////////////////////////////////
