////////////////////////////////////////////////////////////////////////////////
// Created: 07.08.2023
// Autor: Deathman
// Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
	vector4 HomogeniousPosition: POSITION;
	vector3 Position: TEXCOORD0;
	vector3 Normal: TEXCOORD1;
	vector2 UV: TEXCOORD2;
	vector2 DetailUV: TEXCOORD3;
	vector2 Lighting: TEXCOORD4;
};
////////////////////////////////////////////////////////////////////////////////
GBufferPacked main (Interpolators Input)
{
    GBuffer GBuffer;
	
	// Diffuse color
	vector4 Albedo = tex2D (s_base, Input.UV);
    GBuffer.Albedo = 2 * Albedo * tex2D (s_detail, Input.DetailUV);

    GBuffer.AO = (Albedo.a + avg3 (tex2D (s_lmap, Input.UV).rgb)) * (AO_BRIGHTNESS - 0.2f);

    GBuffer.BakedAO = 1.0h;
	
//#ifdef USE_R2_STATIC_SUN
//	vector  MaterialID = tex2D(s_lmap, Input.UV).a;
//#else
//    vector MaterialID = xmaterial;
//#endif

	// Normal for Geometry Buffer
    GBuffer.Normal = normalize (Input.Normal);

	// Position for Geometry Buffer
    GBuffer.Position = Input.Position;

#ifdef USE_POSITION_WITH_NORMALS_BIAS
    GBuffer.Position += GBuffer.Normal * def_virtualh * 0.015f;
#endif
	
	// Out glossiness
    GBuffer.Glossiness = def_gloss;
	
	// Pack Geometry buffer
    GBufferPacked Output = PackGBuffer (GBuffer);
    return Output;
}
////////////////////////////////////////////////////////////////////////////////