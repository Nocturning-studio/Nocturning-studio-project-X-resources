#include "common.h"
#include "gbuffer.h"
#include "fog.h"

struct v2p
{
    float2 tbase: TEXCOORD0;
    float2 tdist0: TEXCOORD1;
    float2 tdist1: TEXCOORD2;
	float4 tctexgen: TEXCOORD3;
    float3 position: TEXCOORD4;
};

struct PixelShaderOutputStruct
{
	float4 Generic_0: COLOR0;
	float4 Position: COLOR1;
};

#define POWER .5h
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
PixelShaderOutputStruct main (v2p I)
{
    float4 t_base = tex2D (s_base, I.tbase);

    float2 t_d0 = tex2D (s_distort, I.tdist0);
    float2 t_d1 = tex2D (s_distort, I.tdist1);
    float2 distort = (t_d0 + t_d1) * 0.5;
    float2 zero = float2 (0.5, 0.5);
    float2 faded = lerp (distort, zero, t_base.a);

	//	Igor: additional depth test
#ifdef	USE_SOFT_WATER
#ifdef	NEED_SOFT_WATER
	float alphaDistort;
	float Depth = GetPositionProjected(I.tctexgen).z;
	float waterDepth = Depth - I.tctexgen.z;
	alphaDistort = saturate(5*waterDepth);
	faded = lerp (zero, faded, alphaDistort);
#endif	//	NEED_SOFT_WATER
#endif	//	USE_SOFT_WATER & NEED_SOFT_WATER

    float2 faded_bx2 = (faded * 2 - 1) * W_DISTORT_POWER;
    float faded_dot = dot (float3 (faded_bx2, 0), .75);
    float alpha = .5f;
    faded = faded * POWER - .5 * POWER + 0.5;
    
#ifdef	NEED_SOFT_WATER    
    float3 final = float3(faded, 0.0h);
#else
    float3 final = float3 (faded, 0.08h);
#endif
    
    // Deathman - считаем туман второй раз, но теперь специально для этого конкретного объекта
    FogComponents Fog = CalcFog (I.position);
    float Opacity = (1.0h - pow (Fog.Fogness, 2)) * alpha;
    final = lerp (final, Fog.Color, Fog.Fogness);
    
    PixelShaderOutputStruct Output;
    Output.Generic_0 = float4 (final.rgb, Opacity);
    Output.Position = float4 (I.position, 1.0);
    return Output;
}

