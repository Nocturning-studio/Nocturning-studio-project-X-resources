#include "common.h"

struct v2p
{
  vector4 tc0: TEXCOORD0; // Central
  vector4 tc1: TEXCOORD1; // -1,+1
  vector4 tc2: TEXCOORD2; // -2,+2
  vector4 tc3: TEXCOORD3; // -3,+3
  vector4 tc4: TEXCOORD4; // -4,+4
  vector4 tc5: TEXCOORD5; // -5,+5
  vector4 tc6: TEXCOORD6; // -6,+6
  vector4 tc7: TEXCOORD7; // -7,+7
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform vector4 MiddleGray;
//////////////////////////////////////////////////////////////////////////////////////////
//	perform 4x4 bilinear, 8x8p, the step (C)
//	c):	8x8p	=> 1x1p		with exp
// native bilinear
vector sample (vector2 tc)
{
    return avg4 (tex2Dlod0 (s_image, tc));
}

vector4 main (v2p I): COLOR
{
	// sample
	vector4 accum0;
    accum0.x = sample (I.tc0.xy);
    accum0.y = sample (I.tc1.xy);
    accum0.z = sample (I.tc2.xy);
    accum0.w = sample (I.tc3.xy);
    
	vector4 accum1;
    accum1.x = sample (I.tc4.xy);
    accum1.y = sample (I.tc5.xy);
    accum1.z = sample (I.tc6.xy);
    accum1.w = sample (I.tc7.xy);
    
	vector4 accum2;
    accum2.x = sample (I.tc0.wz);
    accum2.y = sample (I.tc1.wz);
    accum2.z = sample (I.tc2.wz);
    accum2.w = sample (I.tc3.wz);
    
	vector4 accum3;
    accum3.x = sample (I.tc4.wz);
    accum3.y = sample (I.tc5.wz);
    accum3.z = sample (I.tc6.wz);
    accum3.w = sample (I.tc7.wz);
    

	// perform accumulation
	vector4 final;
    final.x = dot (accum0, 1 / 4.h);
    final.y = dot (accum1, 1 / 4.h);
    final.z = dot (accum2, 1 / 4.h);
    final.w = dot (accum3, 1 / 4.h);
    vector result = dot (final, 1 / 4.h);

    vector scale = MiddleGray.x / (result * MiddleGray.y + MiddleGray.z);
    vector scale_prev = tex2Dlod0 (s_autoexposure, I.tc0.xy).x;

    return lerp (scale_prev, scale, MiddleGray.w);
}
//////////////////////////////////////////////////////////////////////////////////////////