#include "common.h"
#include "shared\fog.h"

struct v2p
{
 	float2 tc0: TEXCOORD0; // base
 	float3 tc1: TEXCOORD1; // environment
	float3 position: TEXCOORD2;
  	float3 c0: COLOR0; // sun
};

struct PixelShaderOutputStruct
{
	float4 Generic_0: COLOR0;
	float4 Position: COLOR1;
};

uniform samplerCUBE s_env;
//////////////////////////////////////////////////////////////////////////////////////////
PixelShaderOutputStruct main (v2p I)
{
	float4 t_base = tex2D (s_base, I.tc0);
	//float4	t_env 	= texCUBE	(s_env,	I.tc1);
	float3 t_env0 = texCUBE (sky_s0, I.tc1);
    float3 t_env1 = texCUBE (sky_s1, I.tc1);
    float3 t_env = env_color.xyz * lerp (t_env0, t_env1, env_color.w);

	float3 base = lerp (t_env, t_base, t_base.a);
	float3 light = I.c0;
	float3 final = light * base * 2;
	
	// Deathman - считаем туман второй раз, но теперь специально для этого конкретного объекта
    float Opacity = t_base.a;
	ApplyPixelFogness(final.rgb, Opacity, I.position);

    PixelShaderOutputStruct Output;
    Output.Generic_0 = float4 (final.rgb, Opacity);
    Output.Position = float4 (I.position, 1.0);
    return Output;
}
