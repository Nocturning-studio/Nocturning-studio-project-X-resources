///////////////////////////////////////////////////////////////////////////////////
// Created: 06.08.2023
// Author: Deathman
// Nocturning studio for NS Project X
///////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "material.h"
#include "lightmap.h"
#include "alpha_test.h"
///////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
	vector4 HomogeniousPosition: POSITION;
	vector3 Position: TEXCOORD0;
	vector3 TBN0: TEXCOORD1;
	vector3 TBN1: TEXCOORD2;
	vector3 TBN2: TEXCOORD3;
	vector2 UV: TEXCOORD4;
	vector2 LightMapUV: TEXCOORD5;
	vector2 Lighting: TEXCOORD6;
};
///////////////////////////////////////////////////////////////////////////////////
GBufferPacked main (Interpolators Input)
{
    GBuffer GBuffer;
	
	// Combine TBN for send to material loading
	matrix3x3 TBN = matrix3x3 (Input.TBN0, Input.TBN1, Input.TBN2);

	// Load primary material data - textures, displacement, normal data preparing, etc
    MaterialParams Material = GetMaterial (Input.UV, TBN, Input.Position);

#ifdef USE_ALPHA_TEST
	calc_alpha_test(Input.UV, Material.Opacity);
#endif

    GBuffer.Albedo = Material.Albedo;
	
    GBuffer.Normal = normalize (mul (TBN, Material.Normal));

	// Multiply by heightmap for create some "bias" for light calculating and avoiding acne 
    GBuffer.Position = Input.Position;

#ifdef USE_POSITION_WITH_NORMALS_BIAS
    GBuffer.Position += GBuffer.Normal * Material.Height * 0.015f;
#endif
	
#ifdef USE_LIGHTMAP
	// Get and separate static light data
	LightMapData LightMap;
	LightMap = Unpack_LightMap(Input.LightMapUV);

	GBuffer.AO = LightMap.AO;
#else//USE_LIGHTMAP
    GBuffer.AO = Input.Lighting.x * (AO_BRIGHTNESS - 0.25f);
#endif//USE_LIGHTMAP

//#ifdef USE_R2_STATIC_SUN
//#ifdef	USE_LIGHTMAP
//	vector MaterialID = LightMap.Sun;
//#else// USE_LIGHTMAP
//	vector MaterialID = Input.Lighting.y;
//#endif//USE_LIGHTMAP
//#else//USE_R2_STATIC_SUN
//    vector MaterialID = L_material.w;
//#endif//USE_R2_STATIC_SUN

	// Apply baked ao for light map ao
    GBuffer.BakedAO = Material.AO;

    GBuffer.Glossiness = Material.Glossiness;
	
    GBufferPacked Output = PackGBuffer (GBuffer);
    return Output;
}
///////////////////////////////////////////////////////////////////////////////////
