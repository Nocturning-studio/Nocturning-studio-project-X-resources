////////////////////////////////////////////////////////////////////////////
//	Created		: 20.11.2023
//	Author		: Deathman
//  Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
////////////////////////////////////////////////////////////////////////////
uniform sampler2D s_brdf_lut;
////////////////////////////////////////////////////////////////////////////
// https://www.xrhadertoy.com/view/WscyRl
// https://habr.com/ru/articles/426123/
// https://habr.com/ru/articles/326852/
////////////////////////////////////////////////////////////////////////////
float GGX_Distribution(float cosThetaNH, float alpha) 
{
    float alpha2 = alpha * alpha;
    float NH_sqr = saturate(cosThetaNH * cosThetaNH);
    float den = NH_sqr * alpha2 + (1.0 - NH_sqr);
    return alpha2 / (PI * den * den);
}

float GGX_PartialGeometry(float cosThetaN, float alpha) 
{
    float cosTheta_sqr = saturate(cosThetaN * cosThetaN);
    float tan2 = (1 - cosTheta_sqr) / cosTheta_sqr;
    float GP = 2 / (1 + sqrt(1 + alpha * alpha * tan2));
    return GP;
}

float SmithG(float NDotV, float alphaG)
{
    float a = alphaG * alphaG;
    float b = NDotV * NDotV;
    return (2.0 * NDotV) / (NDotV + sqrt(a + b - a * b));
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

float3 fresnelSchlickRoughness(float3 F0, float cosTheta, float roughness)
{
    return F0 + (max(1.0 - roughness, F0) - F0) * pow(1.0 - cosTheta, 5.0);
}
////////////////////////////////////////////////////////////////////////////
//https://www.xrhadertoy.com/view/3tlBW7
////////////////////////////////////////////////////////////////////////////
// Trowbridge-Reitz AKA GGX
float GGXDistribution(float3 n, float3 h, float roughness) 
{
    float a_2 = roughness * roughness;
    return a_2 / (PI * pow(pow(safe_dot(n, h), 2.0f) * (a_2 - 1.0f) + 1.0f, 2.0f));
}

// Schlick-Beckmann
float GGXGeometry(float cosTheta, float k) 
{
    return (cosTheta) / (cosTheta * (1.0 - k) + k);
}

float GGXSmiths(float NdotV, float NdotL, float roughness) 
{
    float k = pow(roughness + 1.0, 2.0) / 8.0;
    return GGXGeometry(NdotV, k) * GGXGeometry(NdotL, k);
}

// Anisotropic distribution and visibility functions from Filament GGX
float GGXDistributionAnisotropic(float NoH, float3 h, float3 t, float3 b, float at, float ab)
{
    float ToH = dot(t, h);
    float BoH = dot(b, h);
    float a2 = at * ab;
    float3 v = float3(ab * ToH, at * BoH, a2 * NoH);
    float v2 = dot(v, v);
    float w2 = a2 / v2;
    return a2 * w2 * w2 * (1.0f / PI);
}

// Smiths GGX correlated anisotropic
float GGXSmithsAnisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL) 
{
    float lambdaV = NoL * length(float3(at * ToV, ab * BoV, NoV));
    float lambdaL = NoV * length(float3(at * ToL, ab * BoL, NoL));
    float v = 0.5f / (lambdaV + lambdaL);
    return saturate(v);
}

float2 getBRDFIntegrationMap(float x, float y)
{
    // Avoid reading outside the tile in the atlas
    float2 texCoord = clamp(float2(x, y), 0.000001, 0.99);
    texCoord = float2(texCoord.x / 2.0, texCoord.y / 2.0 + 0.5);
    return tex2Dlod0(s_brdf_lut, texCoord).rg;
}
////////////////////////////////////////////////////////////////////////////
// Unreal engine 4
////////////////////////////////////////////////////////////////////////////
// GGX / Trowbridge-Reitz
// [Walter et al. 2007, "Microfacet models for refraction through rough surfaces"]
float D_GGX(float a2, float NoH)
{
    float d = (NoH * a2 - NoH) * NoH + 1.0f;
    return a2 / (PI * d * d);
}

// [Heitz 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"]
float Vis_SmithJoint(float a2, float NoV, float NoL)
{
    float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
    float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
    return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

// [Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"]
float3 F_Schlick(float3 SpecularColor, float VoH)
{
    float Fc = pow5(1 - VoH);					// 1 sub, 3 mul
    //return Fc + (1 - Fc) * SpecularColor;		// 1 add, 3 mad

    // Anything less than 2% is physically impossible and is instead considered to be shadowing
    return saturate(50.0 * SpecularColor.g) * Fc + (1 - Fc) * SpecularColor;

}

float3 fresnel(float cosTheta, float3 F0) {
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}
////////////////////////////////////////////////////////////////////////////
float getMipLevelFromRoughness(float roughness, float lodCount) 
{
    float ROUGHNESS_1_MIP_RESOLUTION = 1.5;
    float deltaLod = lodCount - ROUGHNESS_1_MIP_RESOLUTION;
    return deltaLod * (sqrt(1.0 + 24.0 * roughness) - 1.0) / 4.0;
}
////////////////////////////////////////////////////////////////////////////
float3 getSpecularDominantDir(float3 rd, float3 n, float roughness)
{
    // The dominant direction of specular reflection for
    // rough materials is different from the "mirror" direction.
    // This is an approximation used in Frostbite for a GGX BRDF.
    // https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    float smoothness = clamp(1.0f - roughness, 0.0f, 1.0f);
    float lerpFactor = smoothness * (sqrt(smoothness) + roughness);
    return normalize(lerp(n, reflect(rd, n), lerpFactor));
}
////////////////////////////////////////////////////////////////////////////
// https://www.shadertoy.com/view/MsSczh
////////////////////////////////////////////////////////////////////////////
float Oren_Nayar_Diffuse(float3 ViewDirection, 
                         float3 Normal, 
                         float3 LdotV, 
                         float3 NdotL, 
                         float3 NdotV, 
                         float Roughness)
{
    float s = LdotV - NdotL * NdotV;
    float t = lerp(1.0f, max(NdotL, NdotV), step(0.0f, s));

    float sigma2 = pow2(Roughness);
    float A = 1. - .5 * (sigma2 / ((sigma2 + .33) + .000001));
    float B = .45 * sigma2 / (sigma2 + .09) + .00001;
    
    float ga = dot(ViewDirection - Normal * NdotV, Normal - Normal * NdotL);

    return max(0.0f, NdotL) * (A + B * max(0.0f, ga) * sqrt((1.0f - NdotV * NdotV) * (1.0f - NdotL * NdotL)) / max(NdotL, NdotV));
}
////////////////////////////////////////////////////////////////////////////
// Subsurface scattering
////////////////////////////////////////////////////////////////////////////
float3 SubsurfaceScattering(float3 Normal, float3 Point, float3 Albedo, float Roughness, float SubSurfacePower, float3 LightDirection)
{
    Roughness = pow(Roughness - 0.3f, 2.0f);
    return Roughness / (PI * pow(pow(saturate(-dot(-normalize(Point), -normalize(LightDirection))), 2.0f) *
        (Roughness - 1.0) + 1.0, 2.0f)) * (abs(dot(normalize(Normal), -normalize(Point))) + 1.0) * 0.5 * Albedo * SubSurfacePower;
}

//https://github.com/FlaxEngine/FlaxEngine/blob/master/Source/Shaders/Lighting.hlsl
/*
LightingData SubsurfaceShading(GBufferSample gBuffer, float energy, float3 L, float3 V, half3 N)
{
    LightingData lighting = StandardShading(gBuffer, energy, L, V, N);
#if defined(USE_GBUFFER_CUSTOM_DATA)
    // Fake effect of the light going through the material
    float3 subsurfaceColor = gBuffer.CustomData.rgb;
    float opacity = gBuffer.CustomData.a;
    float3 H = normalize(V + L);
    float inscatter = pow(saturate(dot(L, -V)), 12.1f) * lerp(3, 0.1f, opacity);
    float normalContribution = saturate(dot(N, H) * opacity + 1.0f - opacity);
    float backScatter = gBuffer.AO * normalContribution / (PI * 2.0f);
    lighting.Transmission = lerp(backScatter, 1, inscatter) * subsurfaceColor;
#endif
    return lighting;
}

LightingData FoliageShading(GBufferSample gBuffer, float energy, float3 L, float3 V, half3 N)
{
    LightingData lighting = StandardShading(gBuffer, energy, L, V, N);
#if defined(USE_GBUFFER_CUSTOM_DATA)
    // Fake effect of the light going through the thin foliage
    float3 subsurfaceColor = gBuffer.CustomData.rgb;
    float wrapNoL = saturate((-dot(N, L) + 0.5f) / 2.25);
    float VoL = dot(V, L);
    float scatter = D_GGX(0.36, saturate(-VoL));
    lighting.Transmission = subsurfaceColor * (wrapNoL * scatter);
#endif
    return lighting;
}
*/
////////////////////////////////////////////////////////////////////////////
//https://www.shadertoy.com/view/XXSBzd
////////////////////////////////////////////////////////////////////////////
#define constant1_FON (0.5f - 2.0f / (3.0f * PI))
#define constant2_FON (2.0f / 3.0f - 28.0f / (15.0f * PI))
////////////////////////////////////////////////////////////////////////////
float E_FON_approx2(float mu, float r)
{
    float mucomp = invert(mu);
    float mucomp2 = pow2(mucomp);
    const float2x2 Gcoeffs = float2x2(0.0571085289f, -0.332181442f, 0.491881867f, 0.0714429953f);
    float GoverPi = dot(mul(Gcoeffs, float2(mucomp, mucomp2)), float2(1.0f, mucomp2));
    return (1.0f + r * GoverPi);
}

float3 f_EON_Opt(float3 Albedo, float Roughness, float NdotL, float NdotV, float LdotV)
{
    float s = LdotV - NdotL * NdotV; // QON s term
    float sovertF = s > 0.0f ? s / max(NdotV, NdotL) : s; // FON s/t
    float AF = 1.0f / (1.0f + constant1_FON * Roughness); // FON A coeff.
    float3 f_ss = (Albedo) * AF * (1.0f + Roughness * sovertF); // single-scatter
    
    float EFo = E_FON_approx2(NdotV, Roughness) * AF; // FON wo albedo (exact)
    float EFi = E_FON_approx2(NdotL, Roughness) * AF;

    float avgEF = AF * (1.0f + constant2_FON * Roughness); // avg. albedo
    float3 rho_ms = (Albedo * Albedo) / (1.0f - Albedo * (1.0f - avgEF));
    const float eps = 1.0e-7f;
    
    // multi-scatter lobe:(removed the max on numerator as didn't appear to make any difference)
    float3 f_ms = (rho_ms) * (avgEF * (1.0f - EFo) * (1.0f - EFi) / max(eps, 1.0f - avgEF));
    
    return f_ss + f_ms;
}
////////////////////////////////////////////////////////////////////////////
// Ultimate lighting model
////////////////////////////////////////////////////////////////////////////
#define USE_LAMBERT_DIFFUSE 1
////////////////////////////////////////////////////////////////////////////
struct LightComponents
{
    float3 Diffuse;
    float3 Specular;
    float3 Subsurface;
};
//---------------------------------------------------------//
// Full PBR lighting model for metallic-roughness materials//
//---------------------------------------------------------//
LightComponents Calculate_Lighting_Model(float Roughness, float Metallness, float3 Albedo, float3 Point, float3 Normal, float3 LightDirection)
{
    LightComponents Light;

    Roughness = Roughness + 0.015f;
    Normal = normalize(Normal);
    LightDirection = -normalize(LightDirection);
    float3 ViewDirection = -normalize(Point);
    float3 HalfWayDirection = normalize(ViewDirection + LightDirection);
    float NdotL = max(dot(Normal, LightDirection), 0.00001f);
    float NdotV = max(dot(Normal, ViewDirection), 1e-5);
    float NdotH = saturate(dot(Normal, HalfWayDirection));
    float HdotV = saturate(dot(HalfWayDirection, ViewDirection));
    float LdotV = dot(ViewDirection, LightDirection);
    float LdotH = dot(LightDirection, HalfWayDirection);
    float RoughnessSqr = pow2(Roughness);
    float RoughnessSqr2 = pow2(RoughnessSqr);

    // Get F0 
    float3 F0 = 0.04f;
    F0 = lerp(F0, Albedo, Metallness);
    float3 kS = fresnelSchlickRoughness(F0, HdotV, Roughness);
    float3 kD = (1.0f - kS) * (1.0f - Metallness);

    // Cook-Torrance specular model
    float D = D_GGX(RoughnessSqr2, NdotH) * NdotH / (4.0f * HdotV);
    float V = Vis_SmithJoint(RoughnessSqr, NdotV, saturate(NdotL)) * saturate(NdotL) * (4.0f * HdotV / NdotH);
    Light.Specular = D * V * kS;
    
    // Disney diffuse model
    //float fDiffuse90 = lerp(0.0f, 0.5f, Roughness) + 2.0f * LdotH * LdotH * Roughness;
    //float3 vDiffuse0 = lerp(1.0f - F0 * 0.25f, 1.0f, Roughness);
    //float3 vDiffuseL = vDiffuse0 + (fDiffuse90 - vDiffuse0) * pow5(1.0f - saturate(NdotL));
    //float3 vDiffuseV = vDiffuse0 + (fDiffuse90 - vDiffuse0) * pow5(1.0f - abs(NdotV));
    //Light.Diffuse = NdotL * kD; //saturate(NdotL) * vDiffuseL * vDiffuseV * lerp(1.0f, 1.0f / 1.51f, Roughness) * kD;

#if USE_EON2_DIFFUSE
    Light.Diffuse = f_EON_Opt(Albedo, Roughness, NdotL, NdotV, LdotV) * NdotL * kD;
#elif USE_OREN_NAYAR_DIFFUSE
    Light.Diffuse = Oren_Nayar_Diffuse(ViewDirection, Normal, LdotV, NdotL, NdotV, Roughness) * Albedo * kD / PI * 2.0f;
#elif USE_LAMBERT_DIFFUSE
    Light.Diffuse = Albedo * NdotL * kD / PI * 2.0f;
#endif

    
    // Fake effect of the light going through the thin foliage
    float wrapNoL = saturate((-NdotL + 0.5f) / 2.25);
    float scatter = D_GGX(0.36, saturate(-LdotV));
    Light.Subsurface = wrapNoL * scatter;

    return Light;
}
//----------------------------------------------//
// Lighting model for non shadowed light sources//
//----------------------------------------------//
LightComponents Calculate_Diffuse_Lighting_Model(float Roughness, float Metallness, float3 Albedo, float3 Point, float3 Normal, float3 LightDirection)
{
    LightComponents Light;

    Normal = normalize(Normal);
    LightDirection = -normalize(LightDirection);
    float3 ViewDirection = -normalize(Point);
    float NdotL = max(dot(Normal, LightDirection), 0.00001f);
    float NdotV = max(dot(Normal, ViewDirection), 1e-5);
    float LdotV = dot(ViewDirection, LightDirection);
    float3 HalfWayDirection = normalize(ViewDirection + LightDirection);
    float LdotH = dot(LightDirection, HalfWayDirection);

    // Get F0 
    float3 F0 = 0.04f;
    F0 = lerp(F0, Albedo, Metallness);
    
#if USE_EON2_DIFFUSE
    Light.Diffuse = f_EON_Opt(Albedo, Roughness, NdotL, NdotV, LdotV) * NdotL;
#elif USE_OREN_NAYAR_DIFFUSE
    Light.Diffuse = Oren_Nayar_Diffuse(ViewDirection, Normal, LdotV, NdotL, NdotV, Roughness) * Albedo / PI;
#elif USE_LAMBERT_DIFFUSE
    Light.Diffuse = Albedo * NdotL / PI;
#endif

    Light.Specular = NULL;
    Light.Subsurface = NULL;

    return Light;
}
////////////////////////////////////////////////////////////////////////////
// Spot\Point lighting
////////////////////////////////////////////////////////////////////////////
float CalculateAttenuation(float3 Point, float3 LightPosition, float LightSourceRange)
{
    float3 LightDirection = Point - LightPosition;
    float LightRadiusSquared = dot(LightDirection, LightDirection);
    return saturate(1.0f - LightRadiusSquared * LightSourceRange);
}
////////////////////////////////////////////////////////////////////////////
