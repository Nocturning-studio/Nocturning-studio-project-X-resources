//////////////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "chromatic_abberation.h"
//////////////////////////////////////////////////////////////////////////////////////////
struct v2p
{
    half4 color: COLOR0; // multiplier, color.w = noise_amount
    half4 gray: COLOR1; // (.3,.3,.3.,amount)
    half2 tc0: TEXCOORD0; // base1 (duality)
    half2 tc1: TEXCOORD1; // base2 (duality)
    half2 tc2: TEXCOORD2; // base  (noise)
};
//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D s_noise;
uniform sampler2D s_distort;
uniform sampler2D s_vignette;
uniform sampler2D s_depth;
//////////////////////////////////////////////////////////////////////////////////////////
uniform float4 c_brightness;
uniform float3 hdr_params;

uniform float4 dof_params;
uniform float4 dof_kernel;

static const float2 depth_params = float2(0.2f, 250.0f);
float linearize_depth(float depth)
{
	return 2.0 * depth_params.x * depth_params.y / (depth_params.y + depth_params.x - (depth * 2.0 - 1.0) * (depth_params.y - depth_params.x));
}

float GetDepth(float2 TexCoords)
{
	float depth = tex2D(s_depth, TexCoords).a;
	return linearize_depth(depth);
}

float DOFFactor(float2 TexCoords)
{
    float depth = GetDepth(TexCoords);
    float dist_to_focus = depth - dof_params.y;
    float blur_far = saturate(dist_to_focus / (dof_params.z - dof_params.y));
    float blur_near = saturate(dist_to_focus / (dof_params.x - dof_params.y));
    float blur = blur_near + blur_far;
    blur = pow(blur, 2.0h);
    return blur;
}

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
half4 main (v2p I): COLOR
{
#ifdef USE_DISTORTION
    half4 distort = tex2D(s_distort, I.tc0);
	half2 offset = (distort.xy - 0.5h) * def_distort;
#else
    half2 offset = half2 (0.0h, 0.0h);
#endif
    
    half3 t_0 = tex2D (s_base, I.tc0 + offset);
    half3 t_1 = tex2D (s_base, I.tc1 + offset);
    half3 image = (t_0 + t_1) * 0.5h;
    
//#ifdef USE_CHROMATIC_ABBERATION
//    image.rgb = ChromaticAberration (image.rgb, (I.tc0 + I.tc1) * 0.5h);
//#endif
    
#ifdef USE_HDR
    image = pow(image, hdr_params.y);
    image *= hdr_params.z;
    const half fWhiteIntensity = hdr_params.x;
    const half fWhiteIntensitySQR = fWhiteIntensity * fWhiteIntensity;

    image = half3 (((image * (1.0h + image / fWhiteIntensitySQR)) / (image + 1.0h)));
#endif    

#ifdef VIGNETTE_MODE
#if VIGNETTE_MODE == 1
    half VignettePower = 0.5h;  
#elif VIGNETTE_MODE == 2
    half VignettePower = vignette_power;
#endif
    half Vignette = tex2D (s_vignette, I.tc1).r;
    image *= Vignette + (1.0f - Vignette) * (1.0f - VignettePower);
#endif    

#ifdef USE_SEPIA
    image *= sepia_params.rgb + (1.0f - sepia_params.rgb) * (1.0f - sepia_params.a);
#endif
    
    half gray = dot (image, I.gray);
    image = lerp (gray, image, I.gray.w);

    half4 t_noise = tex2D (s_noise, I.tc2);
    half3 noised = image * t_noise * 2.0h;
    image = lerp (noised, image, I.color.w);
    
    image = (image * I.color + c_brightness) * 2.0h;
	
	/*float2 TexCoords = I.tc0.xy;
	
	float2 RaySize = screen_res.zw;
	float3 SummaryImageColor = 0;
	float Contribution = 0.0h;
	
	static const float2 poissonDisk_16[16] = {
    float2(-0.94201624, -0.39906216), float2(0.94558609, -0.76890725),  float2(-0.094184101, -0.92938870),
    float2(0.34495938, 0.29387760),   float2(-0.91588581, 0.45771432),  float2(-0.81544232, -0.87912464),
    float2(-0.38277543, 0.27676845),  float2(0.97484398, 0.75648379),   float2(0.44323325, -0.97511554),
    float2(0.53742981, -0.47373420),  float2(-0.26496911, -0.41893023), float2(0.79197514, 0.19090188),
    float2(-0.24188840, 0.99706507),  float2(-0.81409955, 0.91437590),  float2(0.19984126, 0.78641367),
    float2(0.14383161, -0.14100790)};
	
	for (int i = 0; i < 16; i++)
	{
		float2 SampleCoords = TexCoords + poissonDisk_16[i] * RaySize*10;

		float3 SampleColor = tex2Dlod(s_base, float4(SampleCoords.xy,0,0));

		float SampleContribution = DOFFactor (SampleCoords);

		SummaryImageColor += SampleColor * SampleContribution;

		Contribution += SampleContribution;
	}
	
    float BlurPower = DOFFactor (TexCoords);
	float4 BlurredImageColor = float4 ((SummaryImageColor / Contribution), 1.0h) * BlurPower;
	float4 UnblurredImageColor = tex2Dlod (s_base, float4(TexCoords, 0, 0)) * (1.0h - BlurPower);

	image.rgb = BlurredImageColor + UnblurredImageColor;
	//image.rgb = GetDepth(TexCoords)/250.0f;*/
	
    return half4 (image, 1.0h);
}
//////////////////////////////////////////////////////////////////////////////////////////
