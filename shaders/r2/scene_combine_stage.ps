////////////////////////////////////////////////////////////////////////////
//	Created		: 26.11.2023
//	Author		: Deathman
//  Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "gbuffer.xrh"
#include "ambient_light.xrh"
#include "reflection.xrh"
#include "reflections_ssr.xrh"
#include "BRDF.xrh"
////////////////////////////////////////////////////////////////////////////
uniform float debug_mode;
////////////////////////////////////////////////////////////////////////////
struct OutputTextures
{
    float4 Texture0 : COLOR0;
    float4 Texture1 : COLOR1;
};
////////////////////////////////////////////////////////////////////////////
OutputTextures main(float2 TexCoords : TEXCOORD0)
{
    OutputTextures Output;
    
    GBuffer GBuffer = UnpackGBuffer(TexCoords);

    // Get light context
    float3 Albedo = GBuffer.Albedo;//sRgbToLinear(GBuffer.Albedo);
    float NdotV = max(dot(GBuffer.Normal, normalize(-GBuffer.Position)), 0.00001f);
    float3 WorldSpaceNormal = mul(m_v2w, GBuffer.Normal);
    float3 v2pointL = normalize(GBuffer.Position);
    float3 v2point = mul(m_v2w, v2pointL);
    float WorldSpaceNdotV = max(dot(WorldSpaceNormal, -v2point), 0.0);

    // Get ambient
    float RealTimeAO = tex2Dlod0(s_ao, TexCoords).r;
    float LightMapAO = pow(pow(GBuffer.AO + 0.15f, 1.0f / 2.2f), 2.2f);

    // Get F0 
    float IOR = 1.5f;
    float3 F0 = pow(IOR - 1.0f, 2.0f) / pow(IOR + 1.0f, 2.0f);
    F0 = lerp(F0, Albedo, GBuffer.Metallness);

    // Get Fresnel Coeff
    float3 kS = fresnelSchlickRoughness(F0, NdotV, GBuffer.Roughness);
    float3 kD = (1.0f - kS) * (1.0f - GBuffer.Metallness);

    // Get reflection cube coords for IBL specular
    float3 vreflect = getSpecularDominantDir(v2point, WorldSpaceNormal, pow2(GBuffer.Roughness));
    vreflect = RemapCubeCoords(vreflect);

    // Get coords for Irradiance
    float3 IrradianceCoords = RemapCubeCoords(WorldSpaceNormal);

    // Get mip level, corellated with roughness
    float MipLevel = getMipLevelFromRoughness(GBuffer.Roughness, 8.0f);

    // Get irradiance
    float IrradianceMip = clamp(MipLevel, 2.0f, 8.0f);
    float3 IrradianceActualHour = texCUBElod(sky_s0, float4(IrradianceCoords, 8));
    float3 IrradianceNextHour = texCUBElod(sky_s1, float4(IrradianceCoords, 8));
    float3 Irradiance = lerp(IrradianceActualHour, IrradianceNextHour, env_color.w);
    //Irradiance = sRgbToLinear(Irradiance);
    Irradiance = lerp(Irradiance, fog_color.rgb, fog_sky_influence);

    // Get IBL specular
    float3 ReflectedSkyActualHour = texCUBElod(sky_s0, float4(vreflect, MipLevel));
    float3 ReflectedSkyNextHour = texCUBElod(sky_s1, float4(vreflect, MipLevel));
    float3 ReflectedSky = lerp(ReflectedSkyActualHour, ReflectedSkyNextHour, env_color.w);
    //ReflectedSky = sRgbToLinear(ReflectedSky);
    ReflectedSky = lerp(ReflectedSky, fog_color.rgb, fog_sky_influence);

    //float4 reflections = tex2Dlod0(s_reflections, TexCoords);
	//reflections.rgb = lerp(ReflectedSky, reflections.rgb, reflections.a);
    
    float3 IndirectDiffuse = Irradiance * LightMapAO * Albedo * kD * RealTimeAO * GBuffer.BackedAO;
    float3 IndirectSpecular = ReflectedSky * LightMapAO * kS;
    float4 DirectLighting = tex2Dlod0(s_light_accumulator, TexCoords);
    float3 Emission = GBuffer.Emissive * Albedo;

    float3 SceneColor = IndirectDiffuse + IndirectSpecular + DirectLighting + Emission;

    float3 Position = GBuffer.Position;
    
    if (all(Position) == 0.0f)
        Position.z = 150.0f;
    
    float Fog = CalcFogness(Position);
    SceneColor = lerp(SceneColor, fog_params.rgb, Fog);
    float Opacity = pow(Fog, 2.2f);
    
    SceneColor += tex2Dlod0(s_vollight, TexCoords);
    
    Output.Texture1 = float4(SceneColor, 0.0f);

    //float Exposure = tex2Dlod0(s_autoexposure, float2(0.5, 0.5)).r;
    //SceneColor *= Exposure * 2.0f;
    //SceneColor = CalcExposure(SceneColor, Exposure);

    //SceneColor = exponential_tonemapping(SceneColor);
    
    //SceneColor = LinearTosRgb(SceneColor);

    if(debug_mode != 0)
    {
        if (debug_mode == GBUFFER_ALBEDO)
            SceneColor = GBuffer.Albedo;
        else if (debug_mode == GBUFFER_POSITION)
            SceneColor = GBuffer.Position;
        else if (debug_mode == GBUFFER_NORMAL)
            SceneColor = normalize(GBuffer.Normal * 0.5f + 0.5f);
        else if (debug_mode == GBUFFER_ROUGHNESS)
            SceneColor = GBuffer.Roughness;
        else if (debug_mode == GBUFFER_METALLNESS)
            SceneColor = GBuffer.Metallness;
        else if (debug_mode == GBUFFER_SUBSURFACE)
            SceneColor = GBuffer.Subsurface;
        else if (debug_mode == GBUFFER_EMISSIVE)
            SceneColor = GBuffer.Emissive;
        else if (debug_mode == GBUFFER_LIGHTMAP_AO)
            SceneColor = LightMapAO;
        else if (debug_mode == GBUFFER_BAKED_AO)
            SceneColor = GBuffer.BackedAO;
        else if (debug_mode == DIRECT_LIGHT)
            SceneColor = DirectLighting;
        else if (debug_mode == DIRECT_DIFFUSE)
            SceneColor = DirectLighting;
        else if (debug_mode == DIRECT_SPECULAR)
            SceneColor = DirectLighting;
        else if (debug_mode == INDIRECT_LIGHT)
            SceneColor = lerp(IndirectDiffuse, IndirectSpecular, GBuffer.Metallness);
        else if (debug_mode == INDIRECT_LIGHT_DIFFUSE)
            SceneColor = IndirectDiffuse;
        else if (debug_mode == INDIRECT_LIGHT_SPECULAR)
            SceneColor = IndirectSpecular;
        else if (debug_mode == SUBSURFACE_SCATTERING)
            SceneColor = NULL; //SubsurfaceAmbient;
        else if (debug_mode == REAL_TIME_AO)
            SceneColor = RealTimeAO;
    }

    Output.Texture0 = float4(SceneColor, Opacity);
    
    return Output;
}
////////////////////////////////////////////////////////////////////////////
