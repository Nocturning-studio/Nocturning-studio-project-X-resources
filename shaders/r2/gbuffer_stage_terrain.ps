////////////////////////////////////////////////////////////////////////////////
// Created: 07.08.2023
// Autor: Deathman
// Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "height_map_to_normal.h"
#include "terrain_helper.h"
#include "gbuffer.h"
////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
	float4 HomogeniousPosition: POSITION;
	float3 Position: TEXCOORD0;
	float3 TBN0: TEXCOORD1;
	float3 TBN1: TEXCOORD2;
	float3 TBN2: TEXCOORD3;
	float2 UV: TEXCOORD4;
	float2 DetailUV: TEXCOORD5;
};
////////////////////////////////////////////////////////////////////////////////
GBufferPacked main (Interpolators Input)
{
    GBuffer GBuffer;
	
	// Get detail textures map (4 channels = 4 textures)
	float4 Mask = GetDetailMask (Input.UV);

	// levels//$current_level$//terrain//$terrain_texture_name$.dds - rgb = color map, a = AO
	float3 DiffuseTextureData = tex2D (s_base, Input.UV);

	// Combine transform matrix for displacement and normal mapping
	float3x3 TBN = float3x3 (Input.TBN0, Input.TBN1, Input.TBN2);

	// Choose displacement type and calculate UV displacement
	float2 DetailUV = GetDisplacement (Input.Position, TBN, Input.DetailUV, Mask);

	// details albedo data, multiplicated by detail map
	float3 DetailAlbedo = GetDetailAlbedo (Mask, DetailUV);
    GBuffer.Albedo = 2.0f * DiffuseTextureData.rgb * DetailAlbedo;

	// Get DXT comressed normals + AO + glossmap for all details in 4 textures set
	float4 DetailBumpData = GetDetailBump (Mask, DetailUV);

	// Get DXT decompressing data + heightmap for all details in 4 textures set
	float4 DetailBumpDecompressionData = GetDetailBumpDecompression (Mask, DetailUV);

	// Transform normal map color from [0; 1] space to [-1; 1] with DTX decompressing
	float3 NormalMap = DetailBumpData.abg + (DetailBumpDecompressionData.rgb - 1.0f);

	 // Reconstruct z component for normals (actually z component used for Baked AO)
    NormalMap.z = sqrt (1.0f - dot (NormalMap.xy, NormalMap.xy));

    float HeightMap = DetailBumpDecompressionData.a;

	// If we have good material quality - create MORE relief by convertation height to normal map
#if MATERIAL_QUALITY == ULTRA_QUALITY
	float3 NormalMapFromHeight = convert_height_to_normal(HeightMap);
	NormalMap /= NormalMapFromHeight;
#endif

	// Transformate height map from [0; 1] space to [1; 2] and make normals more power
    NormalMap.xy *= HeightMap + 1.0f;

	// Make normals more power with heightmap
    NormalMap.z *= HeightMap;

    NormalMap = normalize (NormalMap);
	
	// Out normal for Geometry buffer
    GBuffer.Normal = normalize (mul (TBN, NormalMap));
	
    GBuffer.Position = Input.Position;

	// Get light map ambient
    GBuffer.AO = tex2D (s_base, Input.UV).a * AO_BRIGHTNESS;

	// Get baked ao from details
    GBuffer.BakedAO = DetailBumpData.g;

	// Create glossiness from details
    GBuffer.Glossiness = DetailBumpData.r;
	
    return PackGBuffer (GBuffer);
}
////////////////////////////////////////////////////////////////////////////////
