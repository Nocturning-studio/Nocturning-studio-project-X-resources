///////////////////////////////////////////////////////////////////////////////////
// Created: 20.11.2023
// Author: Deathman
// Nocturning studio for NS Project X
///////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "BRDF.h"
#include "accumulation_helper.h"
#include "shadow_filtering.h"
///////////////////////////////////////////////////////////////////////////////////
// Constants
uniform float sun_far;
///////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
    float4 HomogeniousPosition: POSITION;
    float4 TexCoords: TEXCOORD0;
};
///////////////////////////////////////////////////////////////////////////////////
Accumulator main (Interpolators Input)
{
    GBuffer GBuffer = UnpackGBuffer (Input.TexCoords.xy/Input.TexCoords.w);
    
    GBuffer.Position += GBuffer.Normal * 0.00075f;

    LightComponents Light = Calculate_Lighting_Model (GBuffer.Roughness, GBuffer.Position, GBuffer.Normal, GBuffer.BakedAO, Ldynamic_dir.xyz);
    
    float3 Diffuse = Light.Diffuse;
    float3 Specular = Light.Specular;
    
    float4 Position = float4 (GBuffer.Position, 1.0f);
    float4 ShadowMapTexCoords = mul (m_shadow, Position);
    float ShadowMap = get_shadow_map (ShadowMapTexCoords);
    
    // Fading with distance
#ifdef USE_SMOOTH_FADING
    float ShadowMapFadingFactor = smoothstep(sun_far * 0.75f, sun_far, length (GBuffer.Position));
    ShadowMap = lerp (ShadowMap, 1.0f, ShadowMapFadingFactor);
#endif    

    Diffuse *= Ldynamic_color.rgb * ShadowMap.xxx;
    Specular *= Ldynamic_color.rgb * ShadowMap.xxx;
    
    Accumulator Output = PackLightingAccumulator (Diffuse, Specular);
    return Output;
}
///////////////////////////////////////////////////////////////////////////////////
