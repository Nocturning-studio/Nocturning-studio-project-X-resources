#include "common.h"
#include "gbuffer.h"
#include "shared\fog.h"
#include "hdr.h"

struct v2p
{
 	float2 tc0: TEXCOORD0; // base
	float4 c: COLOR0; // diffuse

#ifdef	USE_SOFT_PARTICLES
//	Igor: for additional depth dest
	float4 tctexgen	: TEXCOORD1;
#endif	//	USE_SOFT_PARTICLES
	
	float3 position: TEXCOORD2;
};

struct PixelShaderOutputStruct
{
	float4 Generic_0: COLOR0;
	float4 Position: COLOR1;
};
//////////////////////////////////////////////////////////////////////////////////////////
PixelShaderOutputStruct main (v2p I)
{
	float4 distort = tex2D (s_distort, I.tc0);
    float factor = distort.a * dot (I.c.rgb, 0.33h);

#ifdef	USE_SOFT_PARTICLES
	float2	zero = float2( 0.5, 0.5);
	float	alphaDistort;
	float Depth = GetPosition(I.tctexgen.xy/I.tctexgen.w).z;
	float spaceDepth = Depth - I.tctexgen.z;
	alphaDistort = saturate(1.3*spaceDepth);
	distort.xy = lerp  ( zero, distort.xy, alphaDistort);
#endif	//	USE_SOFT_PARTICLES

	// Deathman - считаем туман второй раз, но теперь специально для этого конкретного объекта
    float Fog = CalcFogness (I.position);
    distort.rgb = lerp (distort.rgb, fog_params.rgb, Fog);
    factor *= 1.0h - pow (Fog, 2.2h);
	
    factor = Calc_hdr (factor);
	
    PixelShaderOutputStruct Output;
    Output.Generic_0 = float4 (distort.rgb, factor);
    Output.Position = float4 (I.position, 1.0);
    return Output;
}
