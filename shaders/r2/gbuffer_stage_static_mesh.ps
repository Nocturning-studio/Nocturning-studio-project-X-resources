///////////////////////////////////////////////////////////////////////////////////
// Created: 06.08.2023
// Author: Deathman
// Nocturning studio for NS Project X
///////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "material.h"
#include "lightmap.h"
#include "alpha_test.h"
///////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
	float4 HomogeniousPosition: POSITION;
	float3 Position: TEXCOORD0;
	float3 TBN0: TEXCOORD1;
	float3 TBN1: TEXCOORD2;
	float3 TBN2: TEXCOORD3;
	float2 UV: TEXCOORD4;
	float2 LightMapUV: TEXCOORD5;
	float Lighting: TEXCOORD6;
};
///////////////////////////////////////////////////////////////////////////////////
GBufferPacked main (Interpolators Input)
{
    GBuffer GBuffer;
	
	// Combine TBN for send to material loading
	float3x3 TBN = float3x3 (Input.TBN0, Input.TBN1, Input.TBN2);

	// Load primary material data - textures, displacement, normal data preparing, etc
    MaterialParams Material = GetMaterial (Input.UV, TBN, Input.Position);

#ifdef USE_ALPHA_TEST
	calc_alpha_test(Input.UV, Material.Opacity);
#endif

    GBuffer.Albedo = Material.Albedo;

    GBuffer.Normal = normalize (mul (TBN, Material.Normal)).rgb;
	
    GBuffer.Position = Input.Position;
	
#ifdef USE_LIGHTMAP
	// Get and separate static light data
	LightMapData LightMap;
	LightMap = Unpack_LightMap(Input.LightMapUV);

	GBuffer.AO = LightMap.AO;
#else//USE_LIGHTMAP
    GBuffer.AO = Input.Lighting.x * AO_BRIGHTNESS;
#endif//USE_LIGHTMAP

	// Apply baked ao for light map ao
    GBuffer.BakedAO = Material.AO;

    GBuffer.Roughness = Material.Roughness;

	GBuffer.Metallness = Material.Metallness;

    return PackGBuffer (GBuffer);
}
///////////////////////////////////////////////////////////////////////////////////
