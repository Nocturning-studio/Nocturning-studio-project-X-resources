///////////////////////////////////////////////////////////////////////////////////
// Created: 22.11.2023
// Author: Deathman
// Nocturning studio for NS Project X
///////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "BRDF.h"
#include "accumulation_helper.h"
#include "shadow_filtering.h"
///////////////////////////////////////////////////////////////////////////////////
struct Interpolators
{
	float4 HomogeniousPosition: POSITION;
    float4 TexCoords: TEXCOORD0;
};
///////////////////////////////////////////////////////////////////////////////////
Accumulator main (Interpolators Input)
{
    GBuffer GBuffer = UnpackGBuffer (Input.TexCoords.xy/Input.TexCoords.w);
    
    float AttenuationFactor = CalculateAttenuation (GBuffer.Position, Ldynamic_pos.xyz, Ldynamic_pos.w);
    
    float3 LightDirection = normalize (GBuffer.Position - Ldynamic_pos.xyz);
    LightComponents Light = Calculate_Lighting_Model (1.0f - GBuffer.Glossiness, GBuffer.Position, GBuffer.Normal, GBuffer.BakedAO, LightDirection);
    
    float3 Diffuse = Light.Diffuse;
    float3 Specular = Light.Specular;
    
    float4 Position = float4 (GBuffer.Position, 1.0f);
    float4 ShadowMapTexCoords = mul (m_shadow, Position);
  
#ifdef USE_SHADOW_MAPPING
    float ShadowMap = get_shadow_map (ShadowMapTexCoords);
#else
    float ShadowMap = 1.0f;
#endif
    
#ifdef USE_LIGHT_MAPPING
#ifdef  USE_LIGHT_MAP_XFORM
    ShadowMapTexCoords.x = dot (Position, m_lmap[0]);
    ShadowMapTexCoords.y = dot (Position, m_lmap[1]);
#endif
    float3 LightMap = tex2Dproj (s_lmap, ShadowMapTexCoords);
#else
    float3 LightMap = float3 (1.0f, 1.0f, 1.0f);
#endif
    
    LightMap *= ShadowMap * AttenuationFactor;
    
    Diffuse *= Ldynamic_color.rgb * LightMap;
    Specular *= Ldynamic_color.rgb * LightMap;
    
    Accumulator Output = PackLightingAccumulator (Diffuse, Specular);
    return Output;
}
///////////////////////////////////////////////////////////////////////////////////