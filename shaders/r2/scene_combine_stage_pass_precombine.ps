////////////////////////////////////////////////////////////////////////////
//	Created		: 26.11.2023
//	Author		: Deathman
//  Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "gbuffer.h"
#include "accumulation_helper.h"
#include "ambient_light.h"
#include "reflection.h"
#include "reflections_ssr.h"
#include "BRDF.h"
////////////////////////////////////////////////////////////////////////////
float4 main (float2 TexCoords: TEXCOORD0): COLOR
{
    GBuffer GBuffer = UnpackGBuffer(TexCoords);
    LightingData Light = UnpackLightingAccumulator(TexCoords);

    float3 IndirectDiffuse = CalculateAmbientWithBlurredEnvironment(GBuffer.AO, GBuffer.Normal, GBuffer.Roughness);
    
    float BakedAO = (GBuffer.BakedAO + 1.0f) * 0.5f;
    float RealTimeAO = tex2Dlod0(s_ao, TexCoords).r;
    IndirectDiffuse *= RealTimeAO * BakedAO;

    float3 SceneColor = GBuffer.Albedo * (IndirectDiffuse + Light.Diffuse) + Light.Specular;

    float Fog = CalcFogness (GBuffer.Position);
    SceneColor = lerp (SceneColor, fog_params.rgb, Fog);
    float Opacity = pow (Fog, 2.2f);

    SceneColor = CalcTonemap (SceneColor);
	
    return float4 (SceneColor, 0.0f);
}
////////////////////////////////////////////////////////////////////////////
