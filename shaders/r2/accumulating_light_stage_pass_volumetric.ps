////////////////////////////////////////////////////////////////////////////
// Created: 02.11.2024
// Author: GSC Gameworld
// Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "gbuffer.xrh"
#include "shadow_filtering.xrh"
////////////////////////////////////////////////////////////////////////////
#define RAY_PATH 2.0h
#define JITTER_TEXTURE_SIZE	128.0f
////////////////////////////////////////////////////////////////////////////
#if SUN_SHAFTS_QUALITY==1
#define RAY_SAMPLES	24
#elif SUN_SHAFTS_QUALITY==2
#define RAY_SAMPLES	32
#elif SUN_SHAFTS_QUALITY==3
#define RAY_SAMPLES	64
#endif
////////////////////////////////////////////////////////////////////////////
float4 volume_range; //	x - near plane, y - far plane, z - CascadeID
////////////////////////////////////////////////////////////////////////////
float4 main(float4 TexCoords : TEXCOORD0) : COLOR
{
    GBuffer GBuffer = UnpackGBuffer(TexCoords.xy / TexCoords.w);

	//	Variable ray length, variable step dencity, use jittering
    float4 J0 = tex2D(jitter0, float4(screen_res.x / JITTER_TEXTURE_SIZE * TexCoords.xy / TexCoords.w, 0.0f, 0.0f));
    float coeff = (RAY_SAMPLES - 1.0f * J0.x) / (RAY_SAMPLES * RAY_SAMPLES);
    float3 direction = GBuffer.Position * coeff;

    float depth = GBuffer.Position.z;
    float deltaDepth = direction.z;
	
    float4 current = mul(m_shadow, float4(GBuffer.Position, 1.0f));
    float4 delta = mul(m_shadow, float4(direction, 0.0f));

    float res = 0.0f;
    float max_density = sun_shafts_intensity;
    float density = max_density / RAY_SAMPLES;

    if (depth < 0.0001f)
        res = max_density;

    for (int i = 0; i < RAY_SAMPLES; ++i)
    {
        //if (depth > 0.3f)
            res += density * sample_shadow_map(current, float2(0.0f, 0.0f));
        
        depth -= deltaDepth;
        current -= delta;
    }

    float fSturation = -Ldynamic_dir.z;

	//	Normalize dot product to
    fSturation = 0.5f * fSturation + 0.5f;
	
	//	Map saturation to 0.2..1
    fSturation = 0.80f * fSturation + 0.20f;

    res *= fSturation;
    
    return res * Ldynamic_color;
} 
////////////////////////////////////////////////////////////////////////////