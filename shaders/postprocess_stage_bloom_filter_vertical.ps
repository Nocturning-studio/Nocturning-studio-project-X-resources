//////////////////////////////////////////////////////////////////////////////////////////
// Created: 28.10.2024
//https://github.com/cansik/processing-bloom-filter/blob/master/ProcessingPostFX/shader/blurFrag.glsl
//////////////////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "bloom_common.xrh"
//////////////////////////////////////////////////////////////////////////////////////////
#define BLOOM_SAMPLES_COUNT 24
#define SIGMA bloom_resolution.y
//////////////////////////////////////////////////////////////////////////////////////////
float4 main(float2 TexCoords : TEXCOORD0) : COLOR0
{
    float2 PixelSize = bloom_resolution.zw;
    
    // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)
    float3 incrementalGaussian;
    incrementalGaussian.x = 1.0f / (sqrt(2.0f * PI) * SIGMA);
    incrementalGaussian.y = exp(-0.5f / (SIGMA * SIGMA));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;
    
    float4 BlurredColor = tex2Dlod0(s_bloom, TexCoords) * incrementalGaussian.x;
    float coefficientSum = incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;
    
    [unroll]
    for (int i = -BLOOM_SAMPLES_COUNT / 2; i < BLOOM_SAMPLES_COUNT / 2; i++)
    {
        BlurredColor += tex2Dlod0(s_bloom, TexCoords + PixelSize * float2(0, i)) * incrementalGaussian.x;
        BlurredColor += tex2Dlod0(s_bloom, TexCoords - PixelSize * float2(0, i)) * incrementalGaussian.x;
        coefficientSum += 2.0 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }
    
    BlurredColor /= coefficientSum;
    
    return BlurredColor;
}
//////////////////////////////////////////////////////////////////////////////////////////