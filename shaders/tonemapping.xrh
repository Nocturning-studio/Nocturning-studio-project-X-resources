////////////////////////////////////////////////////////////////////////////
//	Created		: 26.02.2023
//	Author		: Deathman
//  Nocturning studio for NS Project X
////////////////////////////////////////////////////////////////////////////
// X-Ray 2.0
////////////////////////////////////////////////////////////////////////////
static const float3 luminance_weights = float3(0.2125f, 0.7154f, 0.0721f);
////////////////////////////////////////////////////////////////////////////
float3 LumaWeightedReinhard(float3 Color)
{
    const float white_level = 1.0f;
    const float luminance_saturation = 1.00f;
    const float pixel_luminance = dot(Color, luminance_weights);
    const float tone_mapped_luminance = 1.0f - exp(-pixel_luminance / white_level);
    return tone_mapped_luminance * pow(Color / pixel_luminance, luminance_saturation) * white_level;
}
////////////////////////////////////////////////////////////////////////////
float3 uncharted2(float3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);
}
////////////////////////////////////////////////////////////////////////////
float3 sRgbToLinear(float3 vValue)
{
    return vValue * (vValue * (vValue * 0.305306011 + 0.682171111) + 0.012522878);
}

float3 LinearTosRgb(float3 vColor)
{
    float3 S1 = sqrt(vColor);
    float3 S2 = sqrt(S1);
    float3 S3 = sqrt(S2);
    return (0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3);
}
////////////////////////////////////////////////////////////////////////////
float3 LogToLinear(float3 logColor)
{
    const float linearRange = 14.0f;
    const float linearGrey = 0.18f;
    const float exposureGrey = 444.0f;
    return exp2((logColor - exposureGrey / 1023.0) * linearRange) * linearGrey;
}

float3 LinearToLog(float3 linearColor)
{
    const float linearRange = 14.0f;
    const float linearGrey = 0.18f;
    const float exposureGrey = 444.0f;
    return saturate(log2(linearColor) / linearRange - log2(linearGrey) / linearRange + exposureGrey / 1023.0f);
}
////////////////////////////////////////////////////////////////////////////
//https://www.shadertoy.com/view/lcdXz4
////////////////////////////////////////////////////////////////////////////
float HSV_RGB_Helper(float n, float h, float s, float v)
{
    float k = fmod(n + (h * 6.0f), 6.0f);
    return v - (v * s * clamp(min(k, 4.0f - k), 0.0f, 1.0f));
}

float3 HSV_To_RGB(float3 hsv)
{
    float3 t = clamp(hsv, 0.0f, 1.0f);
    return float3(HSV_RGB_Helper(5.0f, t.x, t.y, t.z), HSV_RGB_Helper(3.0f, t.x, t.y, t.z), HSV_RGB_Helper(1.0f, t.x, t.y, t.z));
}

float3 OETF_REC709(float3 linearColor)
{
    float a = 0.0031308;
    float b = 0.055;
    float c = 12.92;
    float m = 1.0 / 2.4;
	
    float3 color = clamp(linearColor, 0.0f, 1.0f);
    color.x = color.x > a ? ((1.0f + b) * pow(color.x, m) - b) : (c * color.x);
    color.y = color.y > a ? ((1.0f + b) * pow(color.y, m) - b) : (c * color.y);
    color.z = color.z > a ? ((1.0f + b) * pow(color.z, m) - b) : (c * color.z);
	
    return color;
}
////////////////////////////////////////////////////////////////////////////
float3 Reinhard(float3 Color) 
{
    return Color / (Color + 1.0f);
}
////////////////////////////////////////////////////////////////////////////
float3 Reinhard2(float3 Color, float Exposure) 
{
    return (Color * (1.0f + Color / pow2(Exposure))) / (1.0f + Color);
}
////////////////////////////////////////////////////////////////////////////
float3 CalcExposure(float3 Color, float Exposure)
{
    float whitesqr = Exposure * Exposure;
    Color *= Exposure;
    return (Color * (1.0f + Color / whitesqr)) / (Color + 1.0f);
}
////////////////////////////////////////////////////////////////////////////
