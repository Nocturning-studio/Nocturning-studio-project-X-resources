//////////////////////////////////////////////////////////////////////////////////////////
//	Created		: 14.01.2024
//	Author		: Mihan323
//	NSProjectX Nocturning Studio - 2024
//////////////////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
#include "gbuffer.xrh"
//////////////////////////////////////////////////////////////////////////////////////////
// Options
#define POWER 4.4f
#define	RADIUS 2.0f
#define BIAS 0.01f
#define SAMPLES_COUNT 8
#define STEPS 4
#define RENDER_DISTANCE 75.0f
//////////////////////////////////////////////////////////////////////////////////////////
float4 main (float2 TexCoords: TEXCOORD0, int2 Position2D: VPOS): COLOR
{
    float3 Position, Normal;
    GetPositionAndNormal (TexCoords, Position, Normal);
    
    if (Position.z > RENDER_DISTANCE)
    {
        return float4 (1.0f, 1.0f, 1.0f, 1.0f);
    }
    else
    {
        float radiusPixels = (RADIUS * screen_res.y * 0.5f) / (Position.z * -pos_decompression_params.y);

	    // Early exit if the projected radius is smaller than 1 full-res pixel
        if (radiusPixels < 1.0f)
        {
            return float4 (1.0f, 1.0f, 1.0f, 1.0f);
        }
        else
        {
            float occ = NULL;
            float dirSum = NULL;
            
            // RotationCosSin is (cos(alpha),sin(alpha)) where alpha is the rotation angle
	        // A 2D rotation matrix is applied (see https://en.wikipedia.org/wiki/Rotation_matrix)
            float c, s;
            sincos (PI, c, s);
            float2x2 rot = float2x2 (c, -s, s, c);
            
            float jitter = (Position2D.y % 4) * 0.25f + (Position2D.x % 4) * 0.0625f + 0.0625f;
			
			//return jitter;
			
            float2 dir;
            sincos (5.0f * PI * jitter, dir.y, dir.x);
            dir = lerp (dir, jitter, 0.5f);
	
            Position += Normal * BIAS;
	
		    // Divide by Steps+1 so that the farthest samples are not fully attenuated
            float stepSizePixels = (radiusPixels * 0.25f) / (STEPS + 1.0f);
		
            [unroll (SAMPLES_COUNT)]
            for (int i = 0; i < SAMPLES_COUNT; ++i)
            {
                float negInvR2 = -1.0f / (RADIUS * RADIUS);
                float rayPixels = 0.5f * stepSizePixels + 1.0f;
		
                dir = mul (dir, rot);
                
                [unroll (STEPS)]
                for (int j = 0; j < STEPS; ++j)
                {
                    float2 tcDelta = round (rayPixels * dir) * screen_res.zw;
                    float2 tcHit = TexCoords + tcDelta;
			
                    rayPixels += stepSizePixels;

                    if ((tcHit.x <= 1.0f && tcHit.y <= 1.0f && tcHit.x >= 0.0f && tcHit.y >= 0.0f))
                    {
                        float3 posHit = GetPosition (tcHit);
                        posHit.z += BIAS;
                        
					    // pos    = view-space position at the kernel center
					    // norm   = view-space normal at the kernel center
					    // posHit = view-space position of the current sample
                        float3 V = Position - posHit;
                        float VdotV = dot (V, V);
                        float NdotV = dot (Normal, -V) * rsqrt (VdotV);

					    // Use saturate(x) instead of max(x,0.f) because that is faster
                        float falloff = saturate (VdotV * negInvR2 + 1.0f);
                        float occluder = saturate (NdotV);
                        
#if USE_INDIRECT
			            if(occluder < 0.05f)
				            continue;

			            float3 indirectDir = normalize(V);

			            float3 normHit = GetNormal(tcHit);

			            float indirectIrradiance = saturate(dot(indirectDir, normHit)) * occluder;
			
			            float3 indirectColor = tex2Dlod0(s_gbuffer_1, tcHit).rgb;//BackBuffer(tcHit);
			            float3 light = indirectColor * indirectIrradiance * 1.0f;//LightIntensity;

                        float3 reflectedColor = tex2Dlod0(s_ao, tcHit).rgb * 0.99;
                        float3 reflectedDir = normalize(reflect(indirectDir, Normal));

			            float reflectedIrradiance = saturate(dot(reflectedDir, normHit));

			            light += reflectedColor * reflectedIrradiance * 1.0f;//ReflectedIntensity;
			
			            dirSum.xyz += light * falloff;
#endif
                        
                        dirSum += occluder * falloff;
                    }
                }
		
                dirSum = dirSum / STEPS;
	
                occ += dirSum;
            }

            occ = occ / SAMPLES_COUNT;
            occ = invert(occ);
            occ = pow (occ, POWER);
            occ = saturate(occ);
            
            // Create smooth render distance border
            float FarFadingFactor = smoothstep (RENDER_DISTANCE * 0.75f, RENDER_DISTANCE, length (Position));
            occ = lerp (occ, 1.0f, FarFadingFactor);
            
            return occ;
        }
    }
}
//////////////////////////////////////////////////////////////////////////////////////////
